---
layout: post
title: Synchronization : Semaphore, Mutex, Event
date: 2019-06-30 15:01:00
description: How to share resources without crash?
---

인터넷에서 찾은 정보를 이해한대로 풀어보면...



우선 이러한 개념이 나오게 된 이유는



서로 다른 프로세스가 한정된 자원을 동시에 사용하려 할 때 문제가 발생할 수 있으므로 이에 대한 해결책을 찾기 위해 고안.

The semaphore concept was invented by Dutch computer scientist Edsger Dijkstra. (from Wikipedia)

유명한 예제는 Dining Philosophers Problem.

(만일 문제인식이 되지 않는다면 반드시 실행해보는것이 좋음. VxWorks의 경우 Workbench에 RTP 예제로 있음.)



이런 문제를 이벤트로 풀려고 해보면...

특정 이벤트가 발생하기까지 기다렸다가 수행하면 되지 않을까? 즉, 자원을 사용가능/불가능의 두 상태로 놓고.



하지만 이럴경우 발생하는 이벤트가 누적되지 않아 동기화에 문제가 발생할 수 있다한다.



그럼 두번째 방법으로는 Semaphore의 이용.

Semaphore가 특정 상태가 되면 원하는 작업을 수행할 수 있고, 이벤트도 누적이 되니까.



그런데 만일 자원이 하나만 존재한다면?

이럴 경우 Mutual Exclusion을 사용하도록 권장되는데 Mutex를 이용하면 작업을 하고있는 프로세스가 해당 자원의 우선권을 갖게 되고 바로 그 프로세스가 우선권을 놓지 않으면 다른 프로세스는 접속할 수 없다는 점 때문이다. 이렇게 되면 여러 프로세스가 동시에 하나의 자원을 사용할 수 없으니까.



여기서 Binary Semaphore랑 많이 헷갈리는데 두 개가 하나의 자원에 대해 우선권을 갖도록 하는 점에서는 동일한데, Semaphore는 다른 프로세스에서도 우선권을 놓도록 할 수 있고, Mutex는 다른 프로세스에서는 이러한 행위가 불가능하다.



문제를 이해하는데는 예제를 드는것이 가장 좋겠지?



사람들이 Niclas Winquist 의 화장실 비유를 가장 많이 드는 것 같음...



화장실을 사용할 때 어떻게 사용해야 문제가 없을 것인가?

우선 하나의 화장실만 있을 경우 사용하는 사람에게 열쇠를 준다.

사용하는 사람은 안에서 잠그고, 사용 후에는 자물쇠를 풀고 다음사람에게 열쇠를 주면 문제없이 사용할 수 있을 것이다.

여기서 열쇠를 Mutex라고 생각하면 된다.



화장실 칸이 여러개 있다면? 예를들어 4개?

이럴 경우 열쇠가 4개이면 된다. 대신 모든 열쇠는 모든 화장실 칸을 열 수 있어야 함. 모든 열쇠는 키가 같음.

이때의 열쇠는 Semaphore라고 보면 된다.
